// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart';

import 'Data_Manager/ObjectBoxDataModel.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <ModelEntity>[
  ModelEntity(
      id: const IdUid(1, 1735960282800903224),
      name: 'AudioPathEntity',
      lastPropertyId: const IdUid(1, 7825675262555155873),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 7825675262555155873),
            name: 'id',
            type: 6,
            flags: 1)
      ],
      relations: <ModelRelation>[
        ModelRelation(
            id: const IdUid(1, 6992798347214712185),
            name: 'audioPathStrings',
            targetId: const IdUid(2, 7874062612004661698))
      ],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(2, 7874062612004661698),
      name: 'AudioPathString',
      lastPropertyId: const IdUid(3, 128126836364998823),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 8417117943471653713),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 856929542752814004),
            name: 'key',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 128126836364998823),
            name: 'value',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(3, 1028969280771019672),
      name: 'DetailsControllerEntity',
      lastPropertyId: const IdUid(1, 3621087899712964008),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 3621087899712964008),
            name: 'id',
            type: 6,
            flags: 1)
      ],
      relations: <ModelRelation>[
        ModelRelation(
            id: const IdUid(2, 8173209520623844672),
            name: 'detailsControllerStrings',
            targetId: const IdUid(4, 484635217409233661))
      ],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(4, 484635217409233661),
      name: 'DetailsControllerText',
      lastPropertyId: const IdUid(3, 4273087962443244145),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 130076486503554384),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 1117897587969037050),
            name: 'key',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 4273087962443244145),
            name: 'value',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(5, 6703956127198940502),
      name: 'DrawImagesEntity',
      lastPropertyId: const IdUid(1, 5652292771768925910),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 5652292771768925910),
            name: 'id',
            type: 6,
            flags: 1)
      ],
      relations: <ModelRelation>[
        ModelRelation(
            id: const IdUid(3, 9021511776335717696),
            name: 'drawImage',
            targetId: const IdUid(6, 1236280156117223268))
      ],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(6, 1236280156117223268),
      name: 'DrawImagesString',
      lastPropertyId: const IdUid(3, 8932790790302068598),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 8884975019268200931),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 7258610761174812368),
            name: 'key',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 8932790790302068598),
            name: 'value',
            type: 23,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(7, 1903081959007290785),
      name: 'EmojiIndex',
      lastPropertyId: const IdUid(2, 5457649862639124625),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 7130338033335228638),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 5457649862639124625),
            name: 'emojiSelectedIndex',
            type: 6,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(8, 7589735178389919318),
      name: 'ExportDataEntity',
      lastPropertyId: const IdUid(1, 7778275775394617333),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 7778275775394617333),
            name: 'id',
            type: 6,
            flags: 1)
      ],
      relations: <ModelRelation>[
        ModelRelation(
            id: const IdUid(4, 2987091493695479302),
            name: 'strings',
            targetId: const IdUid(9, 1534484922788065750))
      ],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(9, 1534484922788065750),
      name: 'ExportStringItem',
      lastPropertyId: const IdUid(2, 6940018133431437682),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 1234026568018694776),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 6940018133431437682),
            name: 'value',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(10, 2142198289257176484),
      name: 'FormatOfDate',
      lastPropertyId: const IdUid(2, 1825199834012199381),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 7825755056175934655),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 1825199834012199381),
            name: 'dateFormat',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(11, 2322218200775348174),
      name: 'ImageDrawData',
      lastPropertyId: const IdUid(2, 1021485948345371839),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 1480668876447519499),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 1021485948345371839),
            name: 'Image',
            type: 23,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(12, 4107901905152598250),
      name: 'ImagePathEntity',
      lastPropertyId: const IdUid(1, 3852160868248813085),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 3852160868248813085),
            name: 'id',
            type: 6,
            flags: 1)
      ],
      relations: <ModelRelation>[
        ModelRelation(
            id: const IdUid(5, 8031758651161952806),
            name: 'imagePathStrings',
            targetId: const IdUid(13, 4084488323906369991))
      ],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(13, 4084488323906369991),
      name: 'ImagePathString',
      lastPropertyId: const IdUid(5, 4749309006111526276),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 5516204697915542215),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 3306052153904935085),
            name: 'key',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 7295329858216990631),
            name: 'value',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 5737622296807127476),
            name: 'height',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 4749309006111526276),
            name: 'width',
            type: 8,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(14, 1989395848933987416),
      name: 'TagDataEntity',
      lastPropertyId: const IdUid(1, 6699672690896215150),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 6699672690896215150),
            name: 'id',
            type: 6,
            flags: 1)
      ],
      relations: <ModelRelation>[
        ModelRelation(
            id: const IdUid(6, 2911451629395682268),
            name: 'strings',
            targetId: const IdUid(15, 8047974654010595974))
      ],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(15, 8047974654010595974),
      name: 'TagStringItem',
      lastPropertyId: const IdUid(3, 8712798535242766053),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 41599630686512943),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 2084448489513097576),
            name: 'key',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 8712798535242766053),
            name: 'value',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(17, 8146169608500389388),
      name: 'WriteDiaryDetailsSaveTemporary',
      lastPropertyId: const IdUid(3, 4894944209909794832),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 7425934056732094580),
            name: 'id',
            type: 6,
            flags: 129),
        ModelProperty(
            id: const IdUid(2, 7379867229711956606),
            name: 'BackgroundImage',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 4894944209909794832),
            name: 'Title',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(18, 4365433057894130209),
      name: 'fileCreate',
      lastPropertyId: const IdUid(10, 5032933587465299462),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 881402151948246691),
            name: 'id',
            type: 6,
            flags: 129),
        ModelProperty(
            id: const IdUid(2, 5543976189885665402),
            name: 'dateTime',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 8610521686417435094),
            name: 'emoji',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 7470149081230080205),
            name: 'title',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 1939327587867736366),
            name: 'isSaveWithDraft',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 1296366821614741696),
            name: 'backgroundImage',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 2195137368896843100),
            name: 'fontFamily',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 8445136807011636082),
            name: 'bulletListImages',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 5630206754578581804),
            name: 'isPinned',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(10, 5032933587465299462),
            name: 'sortData',
            type: 6,
            flags: 0)
      ],
      relations: <ModelRelation>[
        ModelRelation(
            id: const IdUid(7, 4103272258888702685),
            name: 'imagePath',
            targetId: const IdUid(13, 4084488323906369991)),
        ModelRelation(
            id: const IdUid(8, 9078556689492600415),
            name: 'audioPath',
            targetId: const IdUid(2, 7874062612004661698)),
        ModelRelation(
            id: const IdUid(9, 7262600903167951073),
            name: 'drawImages',
            targetId: const IdUid(6, 1236280156117223268)),
        ModelRelation(
            id: const IdUid(10, 5630968687975404043),
            name: 'detailsController',
            targetId: const IdUid(4, 484635217409233661)),
        ModelRelation(
            id: const IdUid(11, 6220370973608243546),
            name: 'tags',
            targetId: const IdUid(15, 8047974654010595974))
      ],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(19, 8250852526993178355),
      name: 'PasswordManger',
      lastPropertyId: const IdUid(3, 8832856952138268202),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 2390555344683349568),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 3034604259699301852),
            name: 'diaryLockSwitchOn',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 8832856952138268202),
            name: 'fingerPrintSwitchOn',
            type: 1,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(20, 9112450244579915361),
      name: 'ThemeSet',
      lastPropertyId: const IdUid(2, 4221291866777525081),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 7818808480147060543),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 4221291866777525081),
            name: 'selectedTheme',
            type: 6,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[])
];

/// Shortcut for [Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [Store.new] for an explanation of all parameters.
Store openStore(
        {String? directory,
        int? maxDBSizeInKB,
        int? fileMode,
        int? maxReaders,
        bool queriesCaseSensitiveDefault = true,
        String? macosApplicationGroup}) =>
    Store(getObjectBoxModel(),
        directory: directory,
        maxDBSizeInKB: maxDBSizeInKB,
        fileMode: fileMode,
        maxReaders: maxReaders,
        queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
        macosApplicationGroup: macosApplicationGroup);

/// Returns the ObjectBox model definition for this project for use with
/// [Store.new].
ModelDefinition getObjectBoxModel() {
  final model = ModelInfo(
      entities: _entities,
      lastEntityId: const IdUid(20, 9112450244579915361),
      lastIndexId: const IdUid(0, 0),
      lastRelationId: const IdUid(11, 6220370973608243546),
      lastSequenceId: const IdUid(0, 0),
      retiredEntityUids: const [4105655066018150643],
      retiredIndexUids: const [],
      retiredPropertyUids: const [8046712518156283412, 3844796225853199769],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, EntityDefinition>{
    AudioPathEntity: EntityDefinition<AudioPathEntity>(
        model: _entities[0],
        toOneRelations: (AudioPathEntity object) => [],
        toManyRelations: (AudioPathEntity object) => {
              RelInfo<AudioPathEntity>.toMany(1, object.id):
                  object.audioPathStrings
            },
        getId: (AudioPathEntity object) => object.id,
        setId: (AudioPathEntity object, int id) {
          object.id = id;
        },
        objectToFB: (AudioPathEntity object, fb.Builder fbb) {
          fbb.startTable(2);
          fbb.addInt64(0, object.id);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final object = AudioPathEntity(id: idParam);
          InternalToManyAccess.setRelInfo<AudioPathEntity>(
              object.audioPathStrings,
              store,
              RelInfo<AudioPathEntity>.toMany(1, object.id));
          return object;
        }),
    AudioPathString: EntityDefinition<AudioPathString>(
        model: _entities[1],
        toOneRelations: (AudioPathString object) => [],
        toManyRelations: (AudioPathString object) => {},
        getId: (AudioPathString object) => object.id,
        setId: (AudioPathString object, int id) {
          object.id = id;
        },
        objectToFB: (AudioPathString object, fb.Builder fbb) {
          final valueOffset = fbb.writeString(object.value);
          fbb.startTable(4);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.key);
          fbb.addOffset(2, valueOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final keyParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0);
          final valueParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final object =
              AudioPathString(id: idParam, key: keyParam, value: valueParam);

          return object;
        }),
    DetailsControllerEntity: EntityDefinition<DetailsControllerEntity>(
        model: _entities[2],
        toOneRelations: (DetailsControllerEntity object) => [],
        toManyRelations: (DetailsControllerEntity object) => {
              RelInfo<DetailsControllerEntity>.toMany(2, object.id):
                  object.detailsControllerStrings
            },
        getId: (DetailsControllerEntity object) => object.id,
        setId: (DetailsControllerEntity object, int id) {
          object.id = id;
        },
        objectToFB: (DetailsControllerEntity object, fb.Builder fbb) {
          fbb.startTable(2);
          fbb.addInt64(0, object.id);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final object = DetailsControllerEntity(id: idParam);
          InternalToManyAccess.setRelInfo<DetailsControllerEntity>(
              object.detailsControllerStrings,
              store,
              RelInfo<DetailsControllerEntity>.toMany(2, object.id));
          return object;
        }),
    DetailsControllerText: EntityDefinition<DetailsControllerText>(
        model: _entities[3],
        toOneRelations: (DetailsControllerText object) => [],
        toManyRelations: (DetailsControllerText object) => {},
        getId: (DetailsControllerText object) => object.id,
        setId: (DetailsControllerText object, int id) {
          object.id = id;
        },
        objectToFB: (DetailsControllerText object, fb.Builder fbb) {
          final valueOffset = fbb.writeString(object.value);
          fbb.startTable(4);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.key);
          fbb.addOffset(2, valueOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final keyParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0);
          final valueParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final object = DetailsControllerText(
              id: idParam, key: keyParam, value: valueParam);

          return object;
        }),
    DrawImagesEntity: EntityDefinition<DrawImagesEntity>(
        model: _entities[4],
        toOneRelations: (DrawImagesEntity object) => [],
        toManyRelations: (DrawImagesEntity object) =>
            {RelInfo<DrawImagesEntity>.toMany(3, object.id): object.drawImage},
        getId: (DrawImagesEntity object) => object.id,
        setId: (DrawImagesEntity object, int id) {
          object.id = id;
        },
        objectToFB: (DrawImagesEntity object, fb.Builder fbb) {
          fbb.startTable(2);
          fbb.addInt64(0, object.id);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final object = DrawImagesEntity(id: idParam);
          InternalToManyAccess.setRelInfo<DrawImagesEntity>(object.drawImage,
              store, RelInfo<DrawImagesEntity>.toMany(3, object.id));
          return object;
        }),
    DrawImagesString: EntityDefinition<DrawImagesString>(
        model: _entities[5],
        toOneRelations: (DrawImagesString object) => [],
        toManyRelations: (DrawImagesString object) => {},
        getId: (DrawImagesString object) => object.id,
        setId: (DrawImagesString object, int id) {
          object.id = id;
        },
        objectToFB: (DrawImagesString object, fb.Builder fbb) {
          final valueOffset = fbb.writeListInt8(object.value);
          fbb.startTable(4);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.key);
          fbb.addOffset(2, valueOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final keyParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0);
          final valueParam = const fb.Uint8ListReader(lazy: false)
              .vTableGet(buffer, rootOffset, 8, Uint8List(0)) as Uint8List;
          final object =
              DrawImagesString(id: idParam, key: keyParam, value: valueParam);

          return object;
        }),
    EmojiIndex: EntityDefinition<EmojiIndex>(
        model: _entities[6],
        toOneRelations: (EmojiIndex object) => [],
        toManyRelations: (EmojiIndex object) => {},
        getId: (EmojiIndex object) => object.id,
        setId: (EmojiIndex object, int id) {
          object.id = id;
        },
        objectToFB: (EmojiIndex object, fb.Builder fbb) {
          fbb.startTable(3);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.emojiSelectedIndex);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final emojiSelectedIndexParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 6);
          final object = EmojiIndex(
              id: idParam, emojiSelectedIndex: emojiSelectedIndexParam);

          return object;
        }),
    ExportDataEntity: EntityDefinition<ExportDataEntity>(
        model: _entities[7],
        toOneRelations: (ExportDataEntity object) => [],
        toManyRelations: (ExportDataEntity object) =>
            {RelInfo<ExportDataEntity>.toMany(4, object.id): object.strings},
        getId: (ExportDataEntity object) => object.id,
        setId: (ExportDataEntity object, int id) {
          object.id = id;
        },
        objectToFB: (ExportDataEntity object, fb.Builder fbb) {
          fbb.startTable(2);
          fbb.addInt64(0, object.id);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final object = ExportDataEntity(id: idParam);
          InternalToManyAccess.setRelInfo<ExportDataEntity>(object.strings,
              store, RelInfo<ExportDataEntity>.toMany(4, object.id));
          return object;
        }),
    ExportStringItem: EntityDefinition<ExportStringItem>(
        model: _entities[8],
        toOneRelations: (ExportStringItem object) => [],
        toManyRelations: (ExportStringItem object) => {},
        getId: (ExportStringItem object) => object.id,
        setId: (ExportStringItem object, int id) {
          object.id = id;
        },
        objectToFB: (ExportStringItem object, fb.Builder fbb) {
          final valueOffset = fbb.writeString(object.value);
          fbb.startTable(3);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, valueOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final valueParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final object = ExportStringItem(id: idParam, value: valueParam);

          return object;
        }),
    FormatOfDate: EntityDefinition<FormatOfDate>(
        model: _entities[9],
        toOneRelations: (FormatOfDate object) => [],
        toManyRelations: (FormatOfDate object) => {},
        getId: (FormatOfDate object) => object.id,
        setId: (FormatOfDate object, int id) {
          object.id = id;
        },
        objectToFB: (FormatOfDate object, fb.Builder fbb) {
          final dateFormatOffset = object.dateFormat == null
              ? null
              : fbb.writeString(object.dateFormat!);
          fbb.startTable(3);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, dateFormatOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final dateFormatParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 6);
          final object = FormatOfDate(dateFormatParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);

          return object;
        }),
    ImageDrawData: EntityDefinition<ImageDrawData>(
        model: _entities[10],
        toOneRelations: (ImageDrawData object) => [],
        toManyRelations: (ImageDrawData object) => {},
        getId: (ImageDrawData object) => object.id,
        setId: (ImageDrawData object, int id) {
          object.id = id;
        },
        objectToFB: (ImageDrawData object, fb.Builder fbb) {
          final ImageOffset = fbb.writeListInt8(object.Image);
          fbb.startTable(3);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, ImageOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final ImageParam = const fb.Uint8ListReader(lazy: false)
              .vTableGet(buffer, rootOffset, 6, Uint8List(0)) as Uint8List;
          final object = ImageDrawData(ImageParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);

          return object;
        }),
    ImagePathEntity: EntityDefinition<ImagePathEntity>(
        model: _entities[11],
        toOneRelations: (ImagePathEntity object) => [],
        toManyRelations: (ImagePathEntity object) => {
              RelInfo<ImagePathEntity>.toMany(5, object.id):
                  object.imagePathStrings
            },
        getId: (ImagePathEntity object) => object.id,
        setId: (ImagePathEntity object, int id) {
          object.id = id;
        },
        objectToFB: (ImagePathEntity object, fb.Builder fbb) {
          fbb.startTable(2);
          fbb.addInt64(0, object.id);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final object = ImagePathEntity(id: idParam);
          InternalToManyAccess.setRelInfo<ImagePathEntity>(
              object.imagePathStrings,
              store,
              RelInfo<ImagePathEntity>.toMany(5, object.id));
          return object;
        }),
    ImagePathString: EntityDefinition<ImagePathString>(
        model: _entities[12],
        toOneRelations: (ImagePathString object) => [],
        toManyRelations: (ImagePathString object) => {},
        getId: (ImagePathString object) => object.id,
        setId: (ImagePathString object, int id) {
          object.id = id;
        },
        objectToFB: (ImagePathString object, fb.Builder fbb) {
          final valueOffset = fbb.writeString(object.value);
          fbb.startTable(6);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.key);
          fbb.addOffset(2, valueOffset);
          fbb.addFloat64(3, object.height);
          fbb.addFloat64(4, object.width);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final keyParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0);
          final valueParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final heightParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 10, 0);
          final widthParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 12, 0);
          final object = ImagePathString(
              id: idParam,
              key: keyParam,
              value: valueParam,
              height: heightParam,
              width: widthParam);

          return object;
        }),
    TagDataEntity: EntityDefinition<TagDataEntity>(
        model: _entities[13],
        toOneRelations: (TagDataEntity object) => [],
        toManyRelations: (TagDataEntity object) =>
            {RelInfo<TagDataEntity>.toMany(6, object.id): object.strings},
        getId: (TagDataEntity object) => object.id,
        setId: (TagDataEntity object, int id) {
          object.id = id;
        },
        objectToFB: (TagDataEntity object, fb.Builder fbb) {
          fbb.startTable(2);
          fbb.addInt64(0, object.id);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final object = TagDataEntity(id: idParam);
          InternalToManyAccess.setRelInfo<TagDataEntity>(object.strings, store,
              RelInfo<TagDataEntity>.toMany(6, object.id));
          return object;
        }),
    TagStringItem: EntityDefinition<TagStringItem>(
        model: _entities[14],
        toOneRelations: (TagStringItem object) => [],
        toManyRelations: (TagStringItem object) => {},
        getId: (TagStringItem object) => object.id,
        setId: (TagStringItem object, int id) {
          object.id = id;
        },
        objectToFB: (TagStringItem object, fb.Builder fbb) {
          final valueOffset = fbb.writeString(object.value);
          fbb.startTable(4);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.key);
          fbb.addOffset(2, valueOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final valueParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final keyParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0);
          final object =
              TagStringItem(id: idParam, value: valueParam, key: keyParam);

          return object;
        }),
    WriteDiaryDetailsSaveTemporary: EntityDefinition<
            WriteDiaryDetailsSaveTemporary>(
        model: _entities[15],
        toOneRelations: (WriteDiaryDetailsSaveTemporary object) => [],
        toManyRelations: (WriteDiaryDetailsSaveTemporary object) => {},
        getId: (WriteDiaryDetailsSaveTemporary object) => object.id,
        setId: (WriteDiaryDetailsSaveTemporary object, int id) {
          object.id = id;
        },
        objectToFB: (WriteDiaryDetailsSaveTemporary object, fb.Builder fbb) {
          final BackgroundImageOffset = fbb.writeString(object.BackgroundImage);
          final TitleOffset = fbb.writeString(object.Title);
          fbb.startTable(4);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, BackgroundImageOffset);
          fbb.addOffset(2, TitleOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final BackgroundImageParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, '');
          final TitleParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final object = WriteDiaryDetailsSaveTemporary(
              BackgroundImageParam, TitleParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);

          return object;
        }),
    fileCreate: EntityDefinition<fileCreate>(
        model: _entities[16],
        toOneRelations: (fileCreate object) => [],
        toManyRelations: (fileCreate object) => {
              RelInfo<fileCreate>.toMany(7, object.id): object.imagePath,
              RelInfo<fileCreate>.toMany(8, object.id): object.audioPath,
              RelInfo<fileCreate>.toMany(9, object.id): object.drawImages,
              RelInfo<fileCreate>.toMany(10, object.id):
                  object.detailsController,
              RelInfo<fileCreate>.toMany(11, object.id): object.tags
            },
        getId: (fileCreate object) => object.id,
        setId: (fileCreate object, int id) {
          object.id = id;
        },
        objectToFB: (fileCreate object, fb.Builder fbb) {
          final dateTimeOffset = fbb.writeString(object.dateTime);
          final titleOffset = fbb.writeString(object.title);
          final backgroundImageOffset = fbb.writeString(object.backgroundImage);
          final fontFamilyOffset = fbb.writeString(object.fontFamily);
          final bulletListImagesOffset =
              fbb.writeString(object.bulletListImages);
          fbb.startTable(11);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, dateTimeOffset);
          fbb.addInt64(2, object.emoji);
          fbb.addOffset(3, titleOffset);
          fbb.addBool(4, object.isSaveWithDraft);
          fbb.addOffset(5, backgroundImageOffset);
          fbb.addOffset(6, fontFamilyOffset);
          fbb.addOffset(7, bulletListImagesOffset);
          fbb.addBool(8, object.isPinned);
          fbb.addInt64(9, object.sortData);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final dateTimeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final isPinnedParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 20, false);
          final sortDataParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 22, 0);
          final emojiParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0);
          final titleParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final isSaveWithDraftParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 12, false);
          final imagePathParam = ToMany<ImagePathString>();
          final audioPathParam = ToMany<AudioPathString>();
          final tagsParam = ToMany<TagStringItem>();
          final drawImagesParam = ToMany<DrawImagesString>();
          final detailsControllerParam = ToMany<DetailsControllerText>();
          final backgroundImageParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 14, '');
          final bulletListImagesParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 18, '');
          final fontFamilyParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 16, '');
          final object = fileCreate(
              dateTimeParam,
              isPinnedParam,
              sortDataParam,
              emojiParam,
              titleParam,
              isSaveWithDraftParam,
              imagePathParam,
              audioPathParam,
              tagsParam,
              drawImagesParam,
              detailsControllerParam,
              backgroundImageParam,
              bulletListImagesParam,
              fontFamilyParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          InternalToManyAccess.setRelInfo<fileCreate>(object.imagePath, store,
              RelInfo<fileCreate>.toMany(7, object.id));
          InternalToManyAccess.setRelInfo<fileCreate>(object.audioPath, store,
              RelInfo<fileCreate>.toMany(8, object.id));
          InternalToManyAccess.setRelInfo<fileCreate>(object.drawImages, store,
              RelInfo<fileCreate>.toMany(9, object.id));
          InternalToManyAccess.setRelInfo<fileCreate>(object.detailsController,
              store, RelInfo<fileCreate>.toMany(10, object.id));
          InternalToManyAccess.setRelInfo<fileCreate>(
              object.tags, store, RelInfo<fileCreate>.toMany(11, object.id));
          return object;
        }),
    PasswordManger: EntityDefinition<PasswordManger>(
        model: _entities[17],
        toOneRelations: (PasswordManger object) => [],
        toManyRelations: (PasswordManger object) => {},
        getId: (PasswordManger object) => object.id,
        setId: (PasswordManger object, int id) {
          object.id = id;
        },
        objectToFB: (PasswordManger object, fb.Builder fbb) {
          fbb.startTable(4);
          fbb.addInt64(0, object.id);
          fbb.addBool(1, object.diaryLockSwitchOn);
          fbb.addBool(2, object.fingerPrintSwitchOn);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final diaryLockSwitchOnParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 6);
          final fingerPrintSwitchOnParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 8);
          final object = PasswordManger(
              id: idParam,
              diaryLockSwitchOn: diaryLockSwitchOnParam,
              fingerPrintSwitchOn: fingerPrintSwitchOnParam);

          return object;
        }),
    ThemeSet: EntityDefinition<ThemeSet>(
        model: _entities[18],
        toOneRelations: (ThemeSet object) => [],
        toManyRelations: (ThemeSet object) => {},
        getId: (ThemeSet object) => object.id,
        setId: (ThemeSet object, int id) {
          object.id = id;
        },
        objectToFB: (ThemeSet object, fb.Builder fbb) {
          fbb.startTable(3);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.selectedTheme);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final selectedThemeParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 6);
          final object =
              ThemeSet(id: idParam, selectedTheme: selectedThemeParam);

          return object;
        })
  };

  return ModelDefinition(model, bindings);
}

/// [AudioPathEntity] entity fields to define ObjectBox queries.
class AudioPathEntity_ {
  /// see [AudioPathEntity.id]
  static final id =
      QueryIntegerProperty<AudioPathEntity>(_entities[0].properties[0]);

  /// see [AudioPathEntity.audioPathStrings]
  static final audioPathStrings =
      QueryRelationToMany<AudioPathEntity, AudioPathString>(
          _entities[0].relations[0]);
}

/// [AudioPathString] entity fields to define ObjectBox queries.
class AudioPathString_ {
  /// see [AudioPathString.id]
  static final id =
      QueryIntegerProperty<AudioPathString>(_entities[1].properties[0]);

  /// see [AudioPathString.key]
  static final key =
      QueryIntegerProperty<AudioPathString>(_entities[1].properties[1]);

  /// see [AudioPathString.value]
  static final value =
      QueryStringProperty<AudioPathString>(_entities[1].properties[2]);
}

/// [DetailsControllerEntity] entity fields to define ObjectBox queries.
class DetailsControllerEntity_ {
  /// see [DetailsControllerEntity.id]
  static final id =
      QueryIntegerProperty<DetailsControllerEntity>(_entities[2].properties[0]);

  /// see [DetailsControllerEntity.detailsControllerStrings]
  static final detailsControllerStrings =
      QueryRelationToMany<DetailsControllerEntity, DetailsControllerText>(
          _entities[2].relations[0]);
}

/// [DetailsControllerText] entity fields to define ObjectBox queries.
class DetailsControllerText_ {
  /// see [DetailsControllerText.id]
  static final id =
      QueryIntegerProperty<DetailsControllerText>(_entities[3].properties[0]);

  /// see [DetailsControllerText.key]
  static final key =
      QueryIntegerProperty<DetailsControllerText>(_entities[3].properties[1]);

  /// see [DetailsControllerText.value]
  static final value =
      QueryStringProperty<DetailsControllerText>(_entities[3].properties[2]);
}

/// [DrawImagesEntity] entity fields to define ObjectBox queries.
class DrawImagesEntity_ {
  /// see [DrawImagesEntity.id]
  static final id =
      QueryIntegerProperty<DrawImagesEntity>(_entities[4].properties[0]);

  /// see [DrawImagesEntity.drawImage]
  static final drawImage =
      QueryRelationToMany<DrawImagesEntity, DrawImagesString>(
          _entities[4].relations[0]);
}

/// [DrawImagesString] entity fields to define ObjectBox queries.
class DrawImagesString_ {
  /// see [DrawImagesString.id]
  static final id =
      QueryIntegerProperty<DrawImagesString>(_entities[5].properties[0]);

  /// see [DrawImagesString.key]
  static final key =
      QueryIntegerProperty<DrawImagesString>(_entities[5].properties[1]);

  /// see [DrawImagesString.value]
  static final value =
      QueryByteVectorProperty<DrawImagesString>(_entities[5].properties[2]);
}

/// [EmojiIndex] entity fields to define ObjectBox queries.
class EmojiIndex_ {
  /// see [EmojiIndex.id]
  static final id =
      QueryIntegerProperty<EmojiIndex>(_entities[6].properties[0]);

  /// see [EmojiIndex.emojiSelectedIndex]
  static final emojiSelectedIndex =
      QueryIntegerProperty<EmojiIndex>(_entities[6].properties[1]);
}

/// [ExportDataEntity] entity fields to define ObjectBox queries.
class ExportDataEntity_ {
  /// see [ExportDataEntity.id]
  static final id =
      QueryIntegerProperty<ExportDataEntity>(_entities[7].properties[0]);

  /// see [ExportDataEntity.strings]
  static final strings =
      QueryRelationToMany<ExportDataEntity, ExportStringItem>(
          _entities[7].relations[0]);
}

/// [ExportStringItem] entity fields to define ObjectBox queries.
class ExportStringItem_ {
  /// see [ExportStringItem.id]
  static final id =
      QueryIntegerProperty<ExportStringItem>(_entities[8].properties[0]);

  /// see [ExportStringItem.value]
  static final value =
      QueryStringProperty<ExportStringItem>(_entities[8].properties[1]);
}

/// [FormatOfDate] entity fields to define ObjectBox queries.
class FormatOfDate_ {
  /// see [FormatOfDate.id]
  static final id =
      QueryIntegerProperty<FormatOfDate>(_entities[9].properties[0]);

  /// see [FormatOfDate.dateFormat]
  static final dateFormat =
      QueryStringProperty<FormatOfDate>(_entities[9].properties[1]);
}

/// [ImageDrawData] entity fields to define ObjectBox queries.
class ImageDrawData_ {
  /// see [ImageDrawData.id]
  static final id =
      QueryIntegerProperty<ImageDrawData>(_entities[10].properties[0]);

  /// see [ImageDrawData.Image]
  static final Image =
      QueryByteVectorProperty<ImageDrawData>(_entities[10].properties[1]);
}

/// [ImagePathEntity] entity fields to define ObjectBox queries.
class ImagePathEntity_ {
  /// see [ImagePathEntity.id]
  static final id =
      QueryIntegerProperty<ImagePathEntity>(_entities[11].properties[0]);

  /// see [ImagePathEntity.imagePathStrings]
  static final imagePathStrings =
      QueryRelationToMany<ImagePathEntity, ImagePathString>(
          _entities[11].relations[0]);
}

/// [ImagePathString] entity fields to define ObjectBox queries.
class ImagePathString_ {
  /// see [ImagePathString.id]
  static final id =
      QueryIntegerProperty<ImagePathString>(_entities[12].properties[0]);

  /// see [ImagePathString.key]
  static final key =
      QueryIntegerProperty<ImagePathString>(_entities[12].properties[1]);

  /// see [ImagePathString.value]
  static final value =
      QueryStringProperty<ImagePathString>(_entities[12].properties[2]);

  /// see [ImagePathString.height]
  static final height =
      QueryDoubleProperty<ImagePathString>(_entities[12].properties[3]);

  /// see [ImagePathString.width]
  static final width =
      QueryDoubleProperty<ImagePathString>(_entities[12].properties[4]);
}

/// [TagDataEntity] entity fields to define ObjectBox queries.
class TagDataEntity_ {
  /// see [TagDataEntity.id]
  static final id =
      QueryIntegerProperty<TagDataEntity>(_entities[13].properties[0]);

  /// see [TagDataEntity.strings]
  static final strings = QueryRelationToMany<TagDataEntity, TagStringItem>(
      _entities[13].relations[0]);
}

/// [TagStringItem] entity fields to define ObjectBox queries.
class TagStringItem_ {
  /// see [TagStringItem.id]
  static final id =
      QueryIntegerProperty<TagStringItem>(_entities[14].properties[0]);

  /// see [TagStringItem.key]
  static final key =
      QueryIntegerProperty<TagStringItem>(_entities[14].properties[1]);

  /// see [TagStringItem.value]
  static final value =
      QueryStringProperty<TagStringItem>(_entities[14].properties[2]);
}

/// [WriteDiaryDetailsSaveTemporary] entity fields to define ObjectBox queries.
class WriteDiaryDetailsSaveTemporary_ {
  /// see [WriteDiaryDetailsSaveTemporary.id]
  static final id = QueryIntegerProperty<WriteDiaryDetailsSaveTemporary>(
      _entities[15].properties[0]);

  /// see [WriteDiaryDetailsSaveTemporary.BackgroundImage]
  static final BackgroundImage =
      QueryStringProperty<WriteDiaryDetailsSaveTemporary>(
          _entities[15].properties[1]);

  /// see [WriteDiaryDetailsSaveTemporary.Title]
  static final Title = QueryStringProperty<WriteDiaryDetailsSaveTemporary>(
      _entities[15].properties[2]);
}

/// [fileCreate] entity fields to define ObjectBox queries.
class fileCreate_ {
  /// see [fileCreate.id]
  static final id =
      QueryIntegerProperty<fileCreate>(_entities[16].properties[0]);

  /// see [fileCreate.dateTime]
  static final dateTime =
      QueryStringProperty<fileCreate>(_entities[16].properties[1]);

  /// see [fileCreate.emoji]
  static final emoji =
      QueryIntegerProperty<fileCreate>(_entities[16].properties[2]);

  /// see [fileCreate.title]
  static final title =
      QueryStringProperty<fileCreate>(_entities[16].properties[3]);

  /// see [fileCreate.isSaveWithDraft]
  static final isSaveWithDraft =
      QueryBooleanProperty<fileCreate>(_entities[16].properties[4]);

  /// see [fileCreate.backgroundImage]
  static final backgroundImage =
      QueryStringProperty<fileCreate>(_entities[16].properties[5]);

  /// see [fileCreate.fontFamily]
  static final fontFamily =
      QueryStringProperty<fileCreate>(_entities[16].properties[6]);

  /// see [fileCreate.bulletListImages]
  static final bulletListImages =
      QueryStringProperty<fileCreate>(_entities[16].properties[7]);

  /// see [fileCreate.isPinned]
  static final isPinned =
      QueryBooleanProperty<fileCreate>(_entities[16].properties[8]);

  /// see [fileCreate.sortData]
  static final sortData =
      QueryIntegerProperty<fileCreate>(_entities[16].properties[9]);

  /// see [fileCreate.imagePath]
  static final imagePath = QueryRelationToMany<fileCreate, ImagePathString>(
      _entities[16].relations[0]);

  /// see [fileCreate.audioPath]
  static final audioPath = QueryRelationToMany<fileCreate, AudioPathString>(
      _entities[16].relations[1]);

  /// see [fileCreate.drawImages]
  static final drawImages = QueryRelationToMany<fileCreate, DrawImagesString>(
      _entities[16].relations[2]);

  /// see [fileCreate.detailsController]
  static final detailsController =
      QueryRelationToMany<fileCreate, DetailsControllerText>(
          _entities[16].relations[3]);

  /// see [fileCreate.tags]
  static final tags = QueryRelationToMany<fileCreate, TagStringItem>(
      _entities[16].relations[4]);
}

/// [PasswordManger] entity fields to define ObjectBox queries.
class PasswordManger_ {
  /// see [PasswordManger.id]
  static final id =
      QueryIntegerProperty<PasswordManger>(_entities[17].properties[0]);

  /// see [PasswordManger.diaryLockSwitchOn]
  static final diaryLockSwitchOn =
      QueryBooleanProperty<PasswordManger>(_entities[17].properties[1]);

  /// see [PasswordManger.fingerPrintSwitchOn]
  static final fingerPrintSwitchOn =
      QueryBooleanProperty<PasswordManger>(_entities[17].properties[2]);
}

/// [ThemeSet] entity fields to define ObjectBox queries.
class ThemeSet_ {
  /// see [ThemeSet.id]
  static final id = QueryIntegerProperty<ThemeSet>(_entities[18].properties[0]);

  /// see [ThemeSet.selectedTheme]
  static final selectedTheme =
      QueryIntegerProperty<ThemeSet>(_entities[18].properties[1]);
}
